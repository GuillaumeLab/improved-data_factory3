{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf12345DXC"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureDatabricks1_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricks1'"
		},
		"trigger1_properties_landing2landed_parameters_fileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"trigger1_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/b7517f4c-6666-4a25-ac4c-43bbb9cfa983/resourceGroups/MLAzure_RG/providers/Microsoft.Storage/storageAccounts/dxcdemodatafactory001"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/email notification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Trigger Logic App",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-48.northeurope.logic.azure.com:443/workflows/9b38f6dc2bdf4a9a99f38107cc1f28cc/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=BMbLD2OIJrTNVLp_BGKDuaDIa0ktBPbbOcJgc7uhXIQ",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\n\n    \"from\": \"',pipeline().parameters.from,'\",\n    \"to\": \"',pipeline().parameters.to,'\",\n    \"cc\": \"\",\n    \"bcc\": \"',pipeline().parameters.bcc,'\",\n    \"subject\": \"',pipeline().parameters.subject,'\",\n    \"body\": \"',pipeline().parameters.body,'\"\n\n}\n')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"from": {
						"type": "string",
						"defaultValue": "glabarre@dxc.com"
					},
					"to": {
						"type": "string",
						"defaultValue": "glabarre@dxc.com"
					},
					"cc": {
						"type": "string",
						"defaultValue": "glabarre@dxc.com"
					},
					"bcc": {
						"type": "string",
						"defaultValue": "glabarre@dxc.com"
					},
					"subject": {
						"type": "string",
						"defaultValue": "Customer is loaded"
					},
					"body": {
						"type": "string",
						"defaultValue": "Dear,<br><br> With this email we want to inform you that the customer is loaded and contains the data up to and including yesterday.<br><br> Best Regards,<br> Business Intelligence<br>"
					}
				},
				"variables": {
					"request": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Helpers"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-04T09:59:30Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-5767512387457847.7.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricks1_accessToken')]"
					},
					"existingClusterId": "0704-073547-sibyl12"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "mapping.json",
						"folderPath": "settings",
						"container": "containerdxctest"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Powerquery_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customers_20210704.csv",
						"folderPath": "landed/customer/fr/ingestdatetime=20210704",
						"container": "containerdxctest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customerID",
						"type": "String"
					},
					{
						"name": "Genre",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "address",
						"type": "String"
					},
					{
						"name": "effectiveDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/landedCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPartition": {
						"type": "string",
						"defaultValue": "20210704"
					},
					"subfolder": {
						"type": "string",
						"defaultValue": "customer/fr/"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('customers_',formatDateTime(utcnow(),'yyyyMMdd'),'.csv')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('landed/',dataset().subfolder,'ingestdatetime=',dataset().folderPartition)",
							"type": "Expression"
						},
						"container": "containerdxctest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "Genre",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "Address",
						"type": "String"
					},
					{
						"name": "effectiveDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/landing')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('customers_',formatDateTime(utcnow(),'yyyyMMdd'),'.csv')",
							"type": "Expression"
						},
						"folderPath": "landing",
						"container": "containerdxctest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "cleaned/output",
						"container": "containerdxctest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customerID",
						"type": "String"
					},
					{
						"name": "Genre",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "address",
						"type": "String"
					},
					{
						"name": "effectiveDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customers_20210704.csv",
						"folderPath": "landed/customer/fr/ingestdatetime=20210704",
						"container": "containerdxctest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customerID",
						"type": "String"
					},
					{
						"name": "Genre",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "address",
						"type": "String"
					},
					{
						"name": "effectiveDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/landed_check')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Metadata1').output.exists",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "landedCustomer",
											"type": "DatasetReference",
											"parameters": {
												"folderPartition": {
													"value": "@pipeline().parameters.partition",
													"type": "Expression"
												},
												"subfolder": {
													"value": "@pipeline().parameters.subfolder_path",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata1').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 60
												}
											}
										]
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"parameters": {
					"partition": {
						"type": "string"
					},
					"subfolder_path": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Helpers"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-04T14:49:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/landedCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/landing2landed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1_copy1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1_copy1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@startsWith(pipeline().parameters.fileName, item().SourceFilename)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Copy data to specific subfolder",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DestinationFolder",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "landing",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "landedCustomer",
														"type": "DatasetReference",
														"parameters": {
															"folderPartition": {
																"value": "@variables('ingest_date')",
																"type": "Expression"
															},
															"subfolder": {
																"value": "@json(variables('table')).DestinationFolder",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "ingest date",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "ingest_date",
													"value": {
														"value": "@formatDateTime(utcnow(),'yyyyMMdd')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "DestinationFolder",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "parse json",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "DestinationFolder",
													"value": {
														"value": "@json(variables('table')).DestinationFolder",
														"type": "Expression"
													}
												}
											},
											{
												"name": "parse json",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ingest date",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "table",
													"value": {
														"value": "@string(item())",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"variables": {
					"ingest_date": {
						"type": "String"
					},
					"table": {
						"type": "String"
					},
					"arra": {
						"type": "Array"
					},
					"newvar": {
						"type": "String"
					},
					"DestinationFolder": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-07-04T14:51:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/landing')]",
				"[concat(variables('factoryId'), '/datasets/landedCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "raw_data",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "outputsink"
						}
					],
					"transformations": [
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tcustomerID as string,\n\t\tGenre as string,\n\t\tAge as string,\n\t\taddress as string,\n\t\teffectiveDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 aggregate(groupBy(Genre),\n\tcustomerID = count()) ~> Aggregate1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcustomerID as string,\n\t\tGenre as string,\n\t\tAge as string,\n\t\taddress as string,\n\t\teffectiveDate as string\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> outputsink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/raw_data')]",
				"[concat(variables('factoryId'), '/datasets/output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerquery1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "Powerquery_dataset",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Powerquery_dataset",
							"dataset": {
								"referenceName": "Powerquery_dataset",
								"type": "DatasetReference"
							}
						}
					],
					"sinks": [],
					"script": "section Section1;\r\nshared Powerquery_dataset = let\r\n  AdfDoc = AzureStorage.BlobContents(\"https://dxcdemodatafactory001.blob.core.windows.net/containerdxctest/landed/customer/fr/ingestdatetime=20210704/customers_20210704.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true])\r\nin\r\n  PromotedHeaders;\r\nshared UserQuery = let\r\n  Source = Powerquery_dataset\r\nin\r\n  #\"Transposed table\";\r\n"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Powerquery_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/groupByCustomer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GroupBy Customer",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"outputsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "some logs",
						"description": "https://docs.microsoft.com/fr-fr/azure/data-factory/control-flow-execute-data-flow-activity",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GroupBy Customer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "logs",
							"value": {
								"value": "@string(activity('GroupBy Customer').output.runStatus.metrics.outputsink.rowsWritten)",
								"type": "Expression"
							}
						}
					}
				],
				"variables": {
					"logs": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/landed2cleaned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Ingest Customer Data",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Check if file received",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Ingestion",
							"baseParameters": {
								"partition_folder": {
									"value": "@concat('ingestdatetime=',formatDateTime(utcnow(),'yyyyMMdd'))",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Check if file received",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "landed_check",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partition": {
									"value": "@formatDateTime(utcnow(),'yyyyMMdd')",
									"type": "Expression"
								},
								"subfolder_path": "customer/fr/"
							}
						}
					},
					{
						"name": "Send Email Notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Ingest Customer Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "email notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"from": "glabarre@dxc.com",
								"to": "glabarre@dxc.com",
								"cc": "glabarre@dxc.com",
								"bcc": "glabarre@dxc.com",
								"subject": "Customer is loaded",
								"body": "Dear,<br><br> With this email we want to inform you that the store cockpit is loaded and contains the data up to and including yesterday.<br><br> Best Regards,<br> Business Intelligence<br>"
							}
						}
					}
				],
				"concurrency": 1,
				"annotations": [],
				"lastPublishTime": "2021-07-04T14:49:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]",
				"[concat(variables('factoryId'), '/pipelines/landed_check')]",
				"[concat(variables('factoryId'), '/pipelines/email notification')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerquery')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "powerquery1",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "powerquery1",
								"type": "DataFlowReference",
								"datasetParameters": {
									"Powerquery_dataset": {},
									"Sinkoutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"sinks": {
								"UserQuery": {
									"name": "Sinkoutput",
									"dataset": {
										"referenceName": "output",
										"type": "DatasetReference",
										"parameters": {}
									},
									"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcustomerID as string,\n\t\tGenre as string,\n\t\tAge as string,\n\t\taddress as string,\n\t\teffectiveDate as string\n\t),\n\tpartitionFileNames:['outputpowerquery.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> Sinkoutput"
								}
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/powerquery1')]",
				"[concat(variables('factoryId'), '/datasets/output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "landing2landed",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileName": "[parameters('trigger1_properties_landing2landed_parameters_fileName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/containerdxctest/blobs/landing/",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('trigger1_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/landing2landed')]"
			]
		}
	]
}